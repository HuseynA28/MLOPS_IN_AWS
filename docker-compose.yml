version: '3.8'
services:
  mysql:
    restart: always
    image: mysql
    container_name: mlflow_db
    ports:
      - "3306:3306"
    env_file:
      - .env
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - dbdata:/var/lib/minesql
      - ./sql_scripts:/docker-entrypoint-initdb.d
    networks:
      custom-network:
        ipv4_address: 172.20.0.2

  mlflow:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile.base
    container_name: mlflow_server
    ports:
      - "5000:5000"
    env_file:
      - .env
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
      S3_MLFLOW_BUCKET: ${S3_MLFLOW_BUCKET}
    command: >
      mlflow server --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
      --artifacts-destination s3://${S3_MLFLOW_BUCKET}/ --serve-artifacts --host 0.0.0.0
    depends_on:
      - mysql
    volumes:
      - mlflow-data:/mlflow
    networks:
      custom-network:
        ipv4_address: 172.20.0.3
    
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.base
    container_name: jupyter
    ports:
      - "8889:8888"
    depends_on:
      - mlflow
    volumes:
      - ./notebooks:/home/huseyn/work
      - jupyter-data:/jupyter
    command: 
      sh -c "echo Starting Jupyter Lab... &&
      jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --NotebookApp.token='password' --allow-root"

    networks:
      custom-network:
        ipv4_address: 172.20.0.4

  db:
    image: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    networks:
      custom-network:
        ipv4_address: 172.20.0.5
    volumes:
      - dbdata:/var/lib/postgresql/data

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      custom-network:
        ipv4_address: 172.20.0.6

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    user: "472"
    ports:
      - "3000:3000"
    volumes:
    - ./config/grafana_datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
    - ./config/grafana_dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
    - ./dashboards:/opt/grafana/dashboards
    networks:
      custom-network:
        ipv4_address: 172.20.0.7

networks:
  custom-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mlflow-data:
  dbdata:
  jupyter-data:
